// <auto-generated>
// ReSharper disable All

using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlTypes;
using System.Linq;
using System.Linq.Expressions;
using System.Threading;
using System.Threading.Tasks;

namespace Data
{
    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    public class MyDbContext : DbContext, IMyDbContext
    {
        public MyDbContext()
        {
        }

        public MyDbContext(DbContextOptions<MyDbContext> options)
            : base(options)
        {
        }

        public DbSet<Country> Countries { get; set; } // Country
        public DbSet<Regio> Regios { get; set; } // Regio

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                optionsBuilder.UseSqlServer(@"Data Source=localhost;User ID=zsombor;Password=12345;Initial Catalog=Transfer;Integrated Security=True;MultipleActiveResultSets=True");
            }
        }

        public bool IsSqlParameterNull(SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == DBNull.Value);
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.ApplyConfiguration(new CountryConfiguration());
            modelBuilder.ApplyConfiguration(new RegioConfiguration());

            modelBuilder.Entity<SelectAllCountriesReturnModel>().HasNoKey();
            modelBuilder.Entity<SelectAllCountriesBckReturnModel>().HasNoKey();
            modelBuilder.Entity<SelectAllRegioReturnModel>().HasNoKey();
            modelBuilder.Entity<SelectCountriesWithRegionNameReturnModel>().HasNoKey();
            modelBuilder.Entity<SelectCountryReturnModel>().HasNoKey();
            modelBuilder.Entity<SelectCountryNameContainsReturnModel>().HasNoKey();
        }


        // Stored Procedures
        public int CreateCountry(string ctyid, string ctyname, int? ctyregid)
        {
            var ctyidParam = new SqlParameter { ParameterName = "@ctyid", SqlDbType = SqlDbType.Char, Direction = ParameterDirection.Input, Value = ctyid, Size = 2 };
            if (ctyidParam.Value == null)
                ctyidParam.Value = DBNull.Value;

            var ctynameParam = new SqlParameter { ParameterName = "@ctyname", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = ctyname, Size = 50 };
            if (ctynameParam.Value == null)
                ctynameParam.Value = DBNull.Value;

            var ctyregidParam = new SqlParameter { ParameterName = "@ctyregid", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = ctyregid.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!ctyregid.HasValue)
                ctyregidParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[CreateCountry] @ctyid, @ctyname, @ctyregid", ctyidParam, ctynameParam, ctyregidParam, procResultParam);

            return (int)procResultParam.Value;
        }

        // CreateCountryAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int CreateRegio(int? regid, string regname)
        {
            var regidParam = new SqlParameter { ParameterName = "@regid", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = regid.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!regid.HasValue)
                regidParam.Value = DBNull.Value;

            var regnameParam = new SqlParameter { ParameterName = "@regname", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = regname, Size = 50 };
            if (regnameParam.Value == null)
                regnameParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[CreateRegio] @regid, @regname", regidParam, regnameParam, procResultParam);

            return (int)procResultParam.Value;
        }

        // CreateRegioAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int DeleteCountry(string ctyid)
        {
            var ctyidParam = new SqlParameter { ParameterName = "@ctyid", SqlDbType = SqlDbType.Char, Direction = ParameterDirection.Input, Value = ctyid, Size = 2 };
            if (ctyidParam.Value == null)
                ctyidParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[DeleteCountry] @ctyid", ctyidParam, procResultParam);

            return (int)procResultParam.Value;
        }

        // DeleteCountryAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int DeleteRegio(int? regid)
        {
            var regidParam = new SqlParameter { ParameterName = "@regid", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = regid.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!regid.HasValue)
                regidParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[DeleteRegio] @regid", regidParam, procResultParam);

            return (int)procResultParam.Value;
        }

        // DeleteRegioAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public List<SelectAllCountriesReturnModel> SelectAllCountries()
        {
            int procResult;
            return SelectAllCountries(out procResult);
        }

        public List<SelectAllCountriesReturnModel> SelectAllCountries(out int procResult)
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[SelectAllCountries]";
            var procResultData = Set<SelectAllCountriesReturnModel>()
                .FromSqlRaw(sqlCommand, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SelectAllCountriesReturnModel>> SelectAllCountriesAsync()
        {
            const string sqlCommand = "EXEC [dbo].[SelectAllCountries]";
            var procResultData = await Set<SelectAllCountriesReturnModel>()
                .FromSqlRaw(sqlCommand)
                .ToListAsync();

            return procResultData;
        }

        public List<SelectAllCountriesBckReturnModel> SelectAllCountriesBck()
        {
            int procResult;
            return SelectAllCountriesBck(out procResult);
        }

        public List<SelectAllCountriesBckReturnModel> SelectAllCountriesBck(out int procResult)
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[SelectAllCountries_BCK]";
            var procResultData = Set<SelectAllCountriesBckReturnModel>()
                .FromSqlRaw(sqlCommand, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SelectAllCountriesBckReturnModel>> SelectAllCountriesBckAsync()
        {
            const string sqlCommand = "EXEC [dbo].[SelectAllCountries_BCK]";
            var procResultData = await Set<SelectAllCountriesBckReturnModel>()
                .FromSqlRaw(sqlCommand)
                .ToListAsync();

            return procResultData;
        }

        public List<SelectAllRegioReturnModel> SelectAllRegio()
        {
            int procResult;
            return SelectAllRegio(out procResult);
        }

        public List<SelectAllRegioReturnModel> SelectAllRegio(out int procResult)
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[SelectAllRegio]";
            var procResultData = Set<SelectAllRegioReturnModel>()
                .FromSqlRaw(sqlCommand, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SelectAllRegioReturnModel>> SelectAllRegioAsync()
        {
            const string sqlCommand = "EXEC [dbo].[SelectAllRegio]";
            var procResultData = await Set<SelectAllRegioReturnModel>()
                .FromSqlRaw(sqlCommand)
                .ToListAsync();

            return procResultData;
        }

        public List<SelectCountriesWithRegionNameReturnModel> SelectCountriesWithRegionName()
        {
            int procResult;
            return SelectCountriesWithRegionName(out procResult);
        }

        public List<SelectCountriesWithRegionNameReturnModel> SelectCountriesWithRegionName(out int procResult)
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[SelectCountriesWithRegionName]";
            var procResultData = Set<SelectCountriesWithRegionNameReturnModel>()
                .FromSqlRaw(sqlCommand, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SelectCountriesWithRegionNameReturnModel>> SelectCountriesWithRegionNameAsync()
        {
            const string sqlCommand = "EXEC [dbo].[SelectCountriesWithRegionName]";
            var procResultData = await Set<SelectCountriesWithRegionNameReturnModel>()
                .FromSqlRaw(sqlCommand)
                .ToListAsync();

            return procResultData;
        }

        public List<SelectCountryReturnModel> SelectCountry(string countryId)
        {
            int procResult;
            return SelectCountry(countryId, out procResult);
        }

        public List<SelectCountryReturnModel> SelectCountry(string countryId, out int procResult)
        {
            var countryIdParam = new SqlParameter { ParameterName = "@countryId", SqlDbType = SqlDbType.Char, Direction = ParameterDirection.Input, Value = countryId, Size = 2 };
            if (countryIdParam.Value == null)
                countryIdParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[SelectCountry] @countryId";
            var procResultData = Set<SelectCountryReturnModel>()
                .FromSqlRaw(sqlCommand, countryIdParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SelectCountryReturnModel>> SelectCountryAsync(string countryId)
        {
            var countryIdParam = new SqlParameter { ParameterName = "@countryId", SqlDbType = SqlDbType.Char, Direction = ParameterDirection.Input, Value = countryId, Size = 2 };
            if (countryIdParam.Value == null)
                countryIdParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[SelectCountry] @countryId";
            var procResultData = await Set<SelectCountryReturnModel>()
                .FromSqlRaw(sqlCommand, countryIdParam)
                .ToListAsync();

            return procResultData;
        }

        public List<SelectCountryNameContainsReturnModel> SelectCountryNameContains(string ctyname)
        {
            int procResult;
            return SelectCountryNameContains(ctyname, out procResult);
        }

        public List<SelectCountryNameContainsReturnModel> SelectCountryNameContains(string ctyname, out int procResult)
        {
            var ctynameParam = new SqlParameter { ParameterName = "@ctyname", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = ctyname, Size = 50 };
            if (ctynameParam.Value == null)
                ctynameParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[SelectCountryNameContains] @ctyname";
            var procResultData = Set<SelectCountryNameContainsReturnModel>()
                .FromSqlRaw(sqlCommand, ctynameParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SelectCountryNameContainsReturnModel>> SelectCountryNameContainsAsync(string ctyname)
        {
            var ctynameParam = new SqlParameter { ParameterName = "@ctyname", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = ctyname, Size = 50 };
            if (ctynameParam.Value == null)
                ctynameParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[SelectCountryNameContains] @ctyname";
            var procResultData = await Set<SelectCountryNameContainsReturnModel>()
                .FromSqlRaw(sqlCommand, ctynameParam)
                .ToListAsync();

            return procResultData;
        }

        public IQueryable<TResult> FromExpression<TResult>(Expression<Func<IQueryable<TResult>>> expression)
        {
            throw new NotImplementedException();
        }
    }
}
// </auto-generated>
